// <auto-generated />
using System;
using App.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240814073554_Initial-Migration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Persons.Domain.Domain.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Persons.Domain.Domain.BusinessEntityAdress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("PersonId");

                    b.ToTable("BusinessEntityAdresses");
                });

            modelBuilder.Entity("Persons.Domain.Domain.BussinessEntitityCreditCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreditCardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreditCardId")
                        .IsUnique();

                    b.HasIndex("PersonId");

                    b.ToTable("BussinessEntitityCreditCards");
                });

            modelBuilder.Entity("Persons.Domain.Domain.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryRegionCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ef40424f-c240-4cdc-a348-1717cb73d1a5"),
                            Code = "DE",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8836),
                            Name = "Germany",
                            UpdatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8838)
                        },
                        new
                        {
                            Id = new Guid("0f9860ad-9b48-4cad-9854-140e50de31f5"),
                            Code = "FR",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8840),
                            Name = "France",
                            UpdatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8841)
                        },
                        new
                        {
                            Id = new Guid("45c697e5-4568-4b40-b4e6-57ee251f9099"),
                            Code = "IT",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8843),
                            Name = "Italy",
                            UpdatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8843)
                        },
                        new
                        {
                            Id = new Guid("04cc8734-e3ab-4173-b12f-5e5c6cff813f"),
                            Code = "ES",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8844),
                            Name = "Spain",
                            UpdatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8845)
                        },
                        new
                        {
                            Id = new Guid("39194297-31cc-4744-99f1-2d50800df0b0"),
                            Code = "PT",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8846),
                            Name = "Portugal",
                            UpdatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8847)
                        },
                        new
                        {
                            Id = new Guid("6d77a303-239a-4f88-b3c8-640a69e42c14"),
                            Code = "NL",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8874),
                            Name = "Netherlands",
                            UpdatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8874)
                        },
                        new
                        {
                            Id = new Guid("fb715975-1b1c-4f0f-95cf-fd02a7f473ee"),
                            Code = "BE",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8876),
                            Name = "Belgium",
                            UpdatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8877)
                        },
                        new
                        {
                            Id = new Guid("b850f3cf-3b7c-494a-9c07-47c7c319bf1c"),
                            Code = "LU",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8878),
                            Name = "Luxembourg",
                            UpdatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8878)
                        },
                        new
                        {
                            Id = new Guid("cefe4d2c-1af3-4db0-b75b-3aab4d010a7e"),
                            Code = "AT",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8880),
                            Name = "Austria",
                            UpdatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8880)
                        },
                        new
                        {
                            Id = new Guid("04d47a62-7327-45f3-ad44-ae90a928f8e8"),
                            Code = "CH",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8882),
                            Name = "Switzerland",
                            UpdatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8882)
                        },
                        new
                        {
                            Id = new Guid("7c5f704f-1114-4461-9e25-9c3dc790ff5a"),
                            Code = "PL",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8883),
                            Name = "Poland",
                            UpdatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8884)
                        },
                        new
                        {
                            Id = new Guid("3efa7242-69e6-40d1-accb-f4bc166e0de5"),
                            Code = "CZ",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8885),
                            Name = "Czech Republic",
                            UpdatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8885)
                        },
                        new
                        {
                            Id = new Guid("ab0ab621-9a1d-4f14-b5cb-4594ff4819f9"),
                            Code = "HU",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8887),
                            Name = "Hungary",
                            UpdatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8887)
                        },
                        new
                        {
                            Id = new Guid("be48c089-dcd7-4c51-b2bb-bea34626b5a8"),
                            Code = "SK",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8890),
                            Name = "Slovakia",
                            UpdatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8891)
                        },
                        new
                        {
                            Id = new Guid("78bf4940-2202-4c90-a37d-2de407a5875c"),
                            Code = "SI",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8892),
                            Name = "Slovenia",
                            UpdatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8892)
                        },
                        new
                        {
                            Id = new Guid("a1314315-49f2-4a25-83af-a94dc5f4a723"),
                            Code = "HR",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8894),
                            Name = "Croatia",
                            UpdatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8894)
                        },
                        new
                        {
                            Id = new Guid("b01b6889-e854-46a3-b593-971611327064"),
                            Code = "RS",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8895),
                            Name = "Serbia",
                            UpdatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8896)
                        },
                        new
                        {
                            Id = new Guid("ba5204bf-df43-4a84-8505-399608942e0e"),
                            Code = "BA",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8897),
                            Name = "Bosnia and Herzegovina",
                            UpdatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8897)
                        },
                        new
                        {
                            Id = new Guid("4850bc58-66b1-40a2-a3a2-07e6b891ef01"),
                            Code = "ME",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8899),
                            Name = "Montenegro",
                            UpdatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8899)
                        },
                        new
                        {
                            Id = new Guid("92b4c6b4-e6d4-41db-8a1c-ece9c8d40f04"),
                            Code = "XK",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8900),
                            Name = "Kosovo",
                            UpdatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8902)
                        },
                        new
                        {
                            Id = new Guid("fe364e7f-8849-4735-9b29-a55edb2c4417"),
                            Code = "MK",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8903),
                            Name = "North Macedonia",
                            UpdatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8903)
                        },
                        new
                        {
                            Id = new Guid("b7f06a2e-fe5a-4653-9637-e7d7283f3287"),
                            Code = "AL",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8906),
                            Name = "Albania",
                            UpdatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8906)
                        },
                        new
                        {
                            Id = new Guid("b2d06a08-ce47-40fb-b682-9c6bb34c45f5"),
                            Code = "GR",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8907),
                            Name = "Greece",
                            UpdatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8908)
                        },
                        new
                        {
                            Id = new Guid("6c1665f0-8e87-441f-ad2a-286f412b7146"),
                            Code = "BG",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8909),
                            Name = "Bulgaria",
                            UpdatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8909)
                        },
                        new
                        {
                            Id = new Guid("6f1a32f5-3c42-4293-96d6-2f0289dfc934"),
                            Code = "RO",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8911),
                            Name = "Romania",
                            UpdatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8911)
                        },
                        new
                        {
                            Id = new Guid("0a726818-2e31-4157-808c-3c3832d95377"),
                            Code = "TR",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8913),
                            Name = "Turkey",
                            UpdatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8913)
                        },
                        new
                        {
                            Id = new Guid("6d12a961-ceeb-46f8-8f9d-c132acbd4801"),
                            Code = "UA",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8914),
                            Name = "Ukraine",
                            UpdatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8914)
                        },
                        new
                        {
                            Id = new Guid("44584613-5be4-4db9-9a03-a9ebbb419022"),
                            Code = "BY",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8916),
                            Name = "Belarus",
                            UpdatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8916)
                        },
                        new
                        {
                            Id = new Guid("18710bb0-3b9c-4dfd-8b11-574d19753f43"),
                            Code = "LT",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8917),
                            Name = "Lithuania",
                            UpdatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8918)
                        },
                        new
                        {
                            Id = new Guid("1d9fecdb-88b9-427d-b97e-b4ceea7459ad"),
                            Code = "LV",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8920),
                            Name = "Latvia",
                            UpdatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8920)
                        },
                        new
                        {
                            Id = new Guid("47c171f8-5c21-4377-b769-397581ca2fc4"),
                            Code = "EE",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8922),
                            Name = "Estonia",
                            UpdatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8922)
                        },
                        new
                        {
                            Id = new Guid("df09cece-1a3b-4338-a663-41aaf3398520"),
                            Code = "FI",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8923),
                            Name = "Finland",
                            UpdatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8924)
                        },
                        new
                        {
                            Id = new Guid("dbe31039-01f8-4d35-b056-a1c2ac7c7956"),
                            Code = "SE",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8925),
                            Name = "Sweden",
                            UpdatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8925)
                        },
                        new
                        {
                            Id = new Guid("c8b5cf85-91db-4840-90b9-6d877bd5c91c"),
                            Code = "NO",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8926),
                            Name = "Norway",
                            UpdatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8927)
                        },
                        new
                        {
                            Id = new Guid("f77dfcb0-2e7e-4df5-a71f-057b5e2b1826"),
                            Code = "DK",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8928),
                            Name = "Denmark",
                            UpdatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8928)
                        },
                        new
                        {
                            Id = new Guid("22a544d4-cebb-4b9a-9497-082648c42e7e"),
                            Code = "IS",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8929),
                            Name = "Iceland",
                            UpdatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8930)
                        },
                        new
                        {
                            Id = new Guid("ab881a21-90cf-412b-9ee4-4b078b80a996"),
                            Code = "GB",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8931),
                            Name = "United Kingdom",
                            UpdatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8931)
                        },
                        new
                        {
                            Id = new Guid("fa887a2e-0426-4074-834d-571b9f24de62"),
                            Code = "IE",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8934),
                            Name = "Ireland",
                            UpdatedAt = new DateTime(2024, 8, 14, 7, 35, 54, 343, DateTimeKind.Utc).AddTicks(8934)
                        });
                });

            modelBuilder.Entity("Persons.Domain.Domain.CreditCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BussinessEntityCreditCardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExpMonth")
                        .HasColumnType("int");

                    b.Property<int>("ExpYear")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CreditCards");
                });

            modelBuilder.Entity("Persons.Domain.Domain.EmailAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EmailAddressPromotion")
                        .HasColumnType("int");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("EmailAddresses");
                });

            modelBuilder.Entity("Persons.Domain.Domain.Password", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Passwords");
                });

            modelBuilder.Entity("Persons.Domain.Domain.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Persons.Domain.Domain.Address", b =>
                {
                    b.HasOne("Persons.Domain.Domain.Country", "Country")
                        .WithMany("Address")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Persons.Domain.Domain.BusinessEntityAdress", b =>
                {
                    b.HasOne("Persons.Domain.Domain.Address", "Address")
                        .WithMany("Adresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Persons.Domain.Domain.Person", "Person")
                        .WithMany("Adresses")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Persons.Domain.Domain.BussinessEntitityCreditCard", b =>
                {
                    b.HasOne("Persons.Domain.Domain.CreditCard", "CreditCard")
                        .WithOne("BussinessEntitityCreditCard")
                        .HasForeignKey("Persons.Domain.Domain.BussinessEntitityCreditCard", "CreditCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Persons.Domain.Domain.Person", "Person")
                        .WithMany("CreditCards")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditCard");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Persons.Domain.Domain.EmailAddress", b =>
                {
                    b.HasOne("Persons.Domain.Domain.Person", "Person")
                        .WithOne("EmailAddress")
                        .HasForeignKey("Persons.Domain.Domain.EmailAddress", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Persons.Domain.Domain.Password", b =>
                {
                    b.HasOne("Persons.Domain.Domain.Person", "Person")
                        .WithMany("Passwords")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Persons.Domain.Domain.Address", b =>
                {
                    b.Navigation("Adresses");
                });

            modelBuilder.Entity("Persons.Domain.Domain.Country", b =>
                {
                    b.Navigation("Address");
                });

            modelBuilder.Entity("Persons.Domain.Domain.CreditCard", b =>
                {
                    b.Navigation("BussinessEntitityCreditCard")
                        .IsRequired();
                });

            modelBuilder.Entity("Persons.Domain.Domain.Person", b =>
                {
                    b.Navigation("Adresses");

                    b.Navigation("CreditCards");

                    b.Navigation("EmailAddress")
                        .IsRequired();

                    b.Navigation("Passwords");
                });
#pragma warning restore 612, 618
        }
    }
}
